name: Java CI/CD with Gradle, Docker, and Docker Compose

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Caching Gradle dependencies to improve workflow execution time
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      - name: Build with Gradle Wrapper
        run: ./gradlew build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Docker image
      - name: Build Docker image
        run: docker build -t byeonjuhwan/usercicid:latest .


      # Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker push byeonjuhwan/usercicid:latest

      # SSH into EC2 instance and pull the latest Docker image and restart the container using Docker Compose
      - name: SSH into EC2 and deploy Docker image using Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull byeonjuhwan/usercicid:latest
            docker-compose -f docker-compose.yml up -d

            
  notify:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      # 배포 성공 시 Discord 알림
    - name: Notify Success to Discord
      if: success()
      uses: sarisia/actions-status-discord@v1.13.1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        status: "success"
        title: "Deployment Succeeded"
        description: "The deployment of the application was successful."
        color: "00FF00" # 성공 시 녹색
        url: "https://naver.com"

    # 배포 실패 시 Discord 알림
    - name: Notify Failure to Discord
      if: failure()
      uses: sarisia/actions-status-discord@v1.13.1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        status: "failure"
        title: "Deployment Failed"
        description: "The deployment of the application failed. Please check the logs."
        color: "FF0000" # 실패 시 빨간색
          
